<?php 
/**
* Product Finder for Joomla! 2.5.x & 3.x
* @package Product Finder
* @subpackage Component
* @version 1.0
* @revision $Revision: 1.3 $
* @author Andrea Forghieri
* @copyright (C) 2012 - 2014 Andrea Forghieri, Solidsystem - http://www.solidsystem.it
* @license http://www.gnu.org/licenses/gpl-2.0.html GNU/GPL version 2
*/
defined( '_JEXEC' ) or die( 'Restricted access' );

jimport('joomla.html.pagination');
jimport('joomla.filesystem.folder');; //required for JFolder to work
/**
 * Extends standard Joomla pagination.
 *
 * @package		Product Finder
 * @subpackage	administrator
 * @since 1.0
 */
class PfRulesPagination extends JPagination
{
	/**
	 * @var    integer  The record number to start displaying from.
	 * @since  1.0
	 */
	public $limitstart = null;

	/**
	 * @var    integer  Number of rows to display per page.
	 * @since  1.0
	 */
	public $limit = null;

	/**
	 * @var    integer  Total number of rows.
	 * @since  1.0
	 */
	public $total = null;

	/**
	 * @var    integer  Number of rows a single rules record is comprised of (number of answers)
	 * @since  1.0
	 */
	public $step = null;
	
	/**
	 * @var    integer  Prefix used for request variables.
	 * @since  1.0
	 */
	public $prefix = null;
	

	/**
	 * @var    boolean  View all flag
	 * @since  1.0
	 */
	protected $_viewall = false;

	/**
	 * Additional URL parameters to be added to the pagination URLs generated by the class.  These
	 * may be useful for filters and extra values when dealing with lists and GET requests.
	 *
	 * @var    array
	 * @since  1.0
	 */
	protected $_additionalUrlParams = array();

	/**
	 * Constructor.
	 *
	 * @param   integer  $total       The total number of items.
	 * @param   integer  $limitstart  The offset of the item to start at.
	 * @param   integer  $limit       The number of items to display per page.
	 * @param   integer  $step        The number of records to display per line.
	 * @param   string   $prefix      The prefix used for request variables.
	 *
	 * @since   1.0
	 */
	public function __construct($total, $limitstart, $limit, $step = 1,  $prefix = '')
	{
		// Value/type checking.
		$this->total = $total > 0 ? ((int) ($total / $step)) : 0 ;
		$this->limitstart = (int) max($limitstart, 0);
		$this->limit = (int) max($limit, 0) ;
		$this->step = (int) $step;
		$this->prefix = $prefix;

		if ($this->limit > $this->total)
		{
			$this->limitstart = 0;
		}

		if (!$this->limit)
		{
			$this->limit = $total;
			$this->limitstart = 0;
		}

		/*
		 * If limitstart is greater than total (i.e. we are asked to display records that don't exist)
		 * then set limitstart to display the last natural page of results
		 */
		if ($this->limitstart > $this->total - $this->limit)
		{
			$this->limitstart = max(0, (int) (ceil($this->total / $this->limit) - 1) * $this->limit);
		}

		// Set the total pages and current page values.
		if ($this->limit > 0)
		{
			$this->set('pages.total', ceil($this->total / $this->limit));
			$this->set('pages.current', ceil(($this->limitstart + 1) / $this->limit));
		}

		// Set the pagination iteration loop values.
		$displayedPages = 10;
		$this->set('pages.start', $this->get('pages.current') - ($displayedPages / 2));
		if ($this->get('pages.start') < 1)
		{
			$this->set('pages.start', 1);
		}
		if (($this->get('pages.start') + $displayedPages) > $this->get('pages.total'))
		{
			$this->set('pages.stop', $this->get('pages.total'));
			if ($this->get('pages.total') < $displayedPages)
			{
				$this->set('pages.start', 1);
			}
			else
			{
				$this->set('pages.start', $this->get('pages.total') - $displayedPages + 1);
			}
		}
		else
		{
			$this->set('pages.stop', ($this->get('pages.start') + $displayedPages - 1));
		}

		// If we are viewing all records set the view all flag to true.
		if ($limit == 0)
		{
			$this->_viewall = true;
		}
	}
	
}

/**
 * Connector class
 * @since 1.3
 *
 */
class PFConnectors{
	
	protected static $instance;
	protected $connectors = array();

	// Private constructor to limit object instantiation to within the class
	private function __construct()
	{
		$this->connectors = $this->getInstalledConnectors();
	}

	/**
	 * Getter method for creating/returning the single instance of this class
	 */
	public static function getInstance()
	{
		if (!self::$instance)
		{
			self::$instance = new PFConnectors();
		}

		return self::$instance;
	}
	
	/**
	 * 
	 * @since 1.3
	 */
	private function getInstalledConnectors()
	{
		return $connectors = $this->loadConnectors();
	}	
	
	/**
	 * Get the default PFConnector object
	 * @since 1.3
	 */
	public function getDefaultConnector()
	{
		
		if(isset($this->connectors['articles']))
		{
			return $this->connectors['articles'];
		}
		else 
		{
			JError::raiseError(500, JText::_('COM_PRODUCTFINDER_ERR_MISSING_DEFAULT_CONNECTOR'));
			return false;
		}
		
	}
	/**
	 * Gets a PFConnector 
	 * 
	 * @param string $connectorName
	 * @return multitype:|boolean a connector object or false if not found
	 * @since 1.3
	 */
	public function getConnector($connectorName)
	{
		if(isset($this->connectors[$connectorName]))
		{
			return $this->connectors[$connectorName];
		}
		else
		{
			JError::raiseError(500, JText::_('COM_PRODUCTFINDER_ERR_CONNECTOR_NOT_FOUND'));
			return false;
		}		
	}
	
	/**
	 * Get all PFConnectors
	 * @return return an array of connector objects |  the only connector object available (as an array of 1 element)
	 * @since 1.3
	 */
	public function getConnectors()
	{
		if(PF_LEVEL)
		{
			return $this->connectors;
		}	
		else
		{
			return $this->getDefaultConnector();
		}
	}
	
	/**
	 * Load PFCconnectors
	 * @return array of objects
	 * @since 1.3
	 */
	private function loadConnectors() 
	{
	
		$conn_path = JPATH_ROOT.'/components/com_productfinder/connectors/';
		$filesindir = JFolder::files($conn_path ,".php");	
		
		$connectors = array();
		if(count($filesindir) > 0)
		{
			foreach($filesindir as $file)
			{
				require_once($conn_path . $file);
				$class = 'ProductfinderModel' . ucfirst((substr($file, 0, strrpos($file, '.'))));
				if(class_exists($class))
				{
					$connector = new $class();
					if($connector->active)
					{
						$connector->class = $class;
						$connectors[$connector->name] = $connector;
					}
				}
			}		
		}
		else 
		{
			JError::raiseError(500, JText::_('COM_PRODUCTFINDER_ERR_MISSING_CONNECTOR'));
		}
		
		if(count($connectors))
		{
			return $connectors;
		}
		else
		{
			return false;
		}
	}
}